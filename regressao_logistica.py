# -*- coding: utf-8 -*-
"""regressao_logistica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14SC3y04EfZk9T-HGcON6iCnIZLZjfPbN
"""

from google.colab import files  #biblioteca utilizada para carregar os dados para o google colab
uploaded = files.upload()

import pandas as pd
import numpy as np

nome_arquivo = "Dataset_Titanic.csv"
data_frame = pd.read_csv(nome_arquivo, sep=',')

data_frame.head()

data_frame.info()

data_frame.describe()

from sklearn import preprocessing

fare_scaled = preprocessing.scale(data_frame['Fare'])

fare_scaled

data_frame['fare_scaled'] = fare_scaled

data_frame.head()

min_fare = data_frame['Fare'].min()

max_fare = data_frame['Fare'].max()

data_frame['normalized_fare'] = data_frame['Fare'].apply(lambda x: ((x-min_fare)/(max_fare-min_fare)))

data_frame['normalized_fare'].max()

min_max = preprocessing.MinMaxScaler()

one_hot = pd.get_dummies(data_frame['Sex'])

data_frame = data_frame.join(one_hot)

data_frame.isnull().sum() * 100 / 891

mean_age = data_frame['Age'].mean()

mean_age

data_frame['Age'].fillna(mean_age, inplace=True)

import seaborn as sns

ax = sns.boxplot(data=data_frame['Age'])

from sklearn.linear_model import LogisticRegression

x = data_frame[['Age', 'Fare']]

y = data_frame['Survived']

model = LogisticRegression(random_state= 0).fit(x, y)

pred = model.predict(x)

model.score(x,y)

print('Y = {} X = {}'.format(model.coef_,model.intercept_))

import pickle
filename = 'finalized_model.sav'
pickle.dump(model, open(filename, 'wb'))

corr_pearson = x.apply(lambda x : x.corr(y, method='pearson'))

ind_pearson = np.argsort(corr_pearson)

print(corr_pearson[ind_pearson])

mt_corr_pearson = data_frame.corr(method='pearson')

mt_corr_pearson.style.background_gradient(cmap='coolwarm').set_precision(2)

corr_spearman = x.apply(lambda x : x.corr(y, method='spearman'))

ind_spearman = np.argsort(corr_spearman)

print(corr_spearman[ind_spearman])

from sklearn.feature_selection import RFE

model_RFE = LogisticRegression()

rfe = RFE(model_RFE,2)

fit = rfe.fit(x,y)

print("Numero de caracteristicas", fit.n_features_)

print("Caracteristicas selecionadas", fit.support_)

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.4)

from xgboost import XGBClassifier

model_arv = XGBClassifier()

model_arv.fit(x_train,y_train)

y_predict = model_arv.predict(x_test)

from sklearn.metrics import accuracy_score

acc = accuracy_score(y_test, y_predict)

acc

from sklearn.decomposition import PCA

pca = PCA(n_components=1)

pca.fit(data_frame[['Fare', 'Age']])

fare_age = pca.transform(x[['Fare', 'Age']])

x['fare_age'] = fare_age

x.drop(['Age', 'Fare'], axis=1,inplace=True)

x

import seaborn as sns

sns.lmplot(x="Age", y="Fare", data=data_frame)