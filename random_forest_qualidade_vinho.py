# -*- coding: utf-8 -*-
"""random_forest_qualidade_vinho

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yh805n1S573O0tULk4PuUHlTVMmTqzKr

Os dois conjuntos de dados estão relacionados com as variantes do vinho "Vinho Verde" português. Para mais detalhes, consulte a referência [Cortez et al., 2009]. Devido a questões de privacidade e logística, apenas variáveis físico-químicas (entradas) e sensoriais (a saída) estão disponíveis (por exemplo, não há dados sobre os tipos de uva, marca de vinho, preço de venda do vinho, etc.).

Esses conjuntos de dados podem ser vistos como tarefas de classificação. 

**Objetivo:** É seu trabalho como engenheiro da computação prever a qualidade do vinho.
"""

import pandas as pd #biblioteca utilizada para o tratamento de dados via dataframes 
import numpy as np #biblioteca utilizada para o tratamento de valores numéricos (vetores e matrizes)
import matplotlib.pyplot as plt #biblioteca utilizada para construir os gráficos
import seaborn as sns #biblioteca utilizada para construir os gráficos
from sklearn.linear_model import LogisticRegression # biblioteca para regressão logística 
from sklearn.decomposition import PCA #biblioteca para PCA
from sklearn.feature_selection import RFE #biblioteca para aplicação RFE
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression #importa o modelo de regressão linear univariada
from sklearn.metrics import accuracy_score 
from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler

from google.colab import files  #biblioteca utilizada para carregar os dados para o google colab
uploaded = files.upload()

"""**Faça a leitura do CSV e apresente informações do dataset (head, info, describe)**"""

dataframe = pd.read_csv("winequality-red.csv")

dataframe.head()

dataframe.info()

dataframe.describe()

"""**Caso necessário, realize estapas de pré-processamento como limpeza, subistituição de dados nulos, normalização ...**"""

dataframe.isnull().sum()

"""
**Separe os dados de Treino e Teste utilizando o train_test_split**"""

x = dataframe[['alcohol','density','sulphates','pH','fixed acidity','citric acid','volatile acidity','chlorides','free sulfur dioxide','total sulfur dioxide']]

y = dataframe[['quality']]

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0,1))

x_scaled = scaler.fit_transform(x)

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=3)

"""**Importe a biblioteca da classificação de árvore de decisão do SKLEARN**"""

from sklearn.tree import DecisionTreeRegressor

"""**Crie um modelo de árvore de decisão para classificar**"""

clf_tree = DecisionTreeRegressor()

clf_tree.fit(x_train,y_train)

pred_tree = clf_tree.predict(x_test)

"""**Verificque a acurácia do modelo (accuracy_score)**"""

accuracy_score(y_test, pred_tree)

"""**Importe o graphviz e exporte a arquitetura da árvore para um PDF**

dicas :
  
  -> dot_data = tree.export_graphviz(modelo)

  -> graph = graphviz.Source(dot_data)
  
  -> grap.render('nomequalquer')
"""

from sklearn import tree
from IPython.display import Image
import pydotplus

dot = tree.export_graphviz(clf_tree)
graph = pydotplus.graph_from_dot_data(dot)
Image(graph.create_png())

"""**Importe a biblioteca Random Forest Classifier e crie uma combinação com 3 árvores**"""

from sklearn.ensemble import RandomForestClassifier

clf_random = RandomForestClassifier(n_estimators=3)

clf_random.fit(x_train,y_train)

pred_Random = clf_random.predict(x_test)

"""**Verifique a acurácia do modelo (accuracy_score)**"""

accuracy_score(y_test, pred_Random)

"""**Encontre um modelo de Random Forest Classifier com um acurácia igual ou superior a 70%**

**Você pode alterar qualquer hiperparamêtro quando instanciar o modelo**

**Você pode realizar qualquer preparação nos dados**

dica : https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html
"""

clf_random = RandomForestClassifier(n_jobs=-1, oob_score=True)

clf_random.fit(x_train,y_train)

pred_Random = clf_random.predict(x_test)

accuracy_score(y_test, pred_Random)