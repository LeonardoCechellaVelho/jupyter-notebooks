# -*- coding: utf-8 -*-
"""predicao_imagem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1thtbpst0oO7mvfxfGxFa4MiQQc7kcDQl
"""

import tensorflow as tf

import pandas as pd
import numpy as np
import cv2
import matplotlib.pyplot as plt

(x_train, y_train), (x_test,y_test) = tf.keras.datasets.mnist.load_data()

x_train.shape

plt.gray()
plt.imshow(x_train[15500,:,:])
plt.colorbar()

x_test = x_test/255

x_train = x_train/255

data_set_test = []
for i in x_test :
  data_set_test.append(i.flatten())
data_set_test = np.array(data_set_test)

data_set_test.shape

data_set_train = []
for i in x_train :
  data_set_train.append(i.flatten())
data_set_train = np.array(data_set_train)

from sklearn.neighbors import KNeighborsClassifier

knn_model = KNeighborsClassifier(n_neighbors=3)

knn_model.fit(data_set_train,y_train)

y_pred = knn_model.predict(data_set_test[:1000])

from sklearn.metrics import accuracy_score

accuracy_score(y_test[:1000], y_pred)

from google.colab.patches import cv2_imshow

img_teste = cv2.imread('teste6.png',0)

cv2_imshow(img_teste)

img_teste = img_teste/255

plt.gray()
plt.imshow(img_teste)
plt.colorbar()

img_teste_f = img_teste.flatten()

knn_model.predict(img_teste_f.reshape(1,-1))

"""*   Ler as imagens (grayscale)
*   Ajustar o tamanho (Resizer 28x28)
*   Verificar segmentação
*   Normalizar as imagens (/255)
*   Realizar um predict utilizando KNN
"""

img_carro1 = cv2.imread('carro1.png',0)
plt.gray()
plt.imshow(img_carro1)
plt.colorbar()

metodo = cv2.THRESH_OTSU + cv2.THRESH_BINARY_INV

ret,img_carro1 = cv2.threshold(img_carro1,127,255,metodo)

img_carro1_r = cv2.resize(img_carro1, (28,28))

img_carro1_r = img_carro1_r/255

img_carro1_f = img_carro1_r.flatten()

knn_model.predict(img_carro1_f.reshape(1,-1))

image_teste_0 = cv2.imread('teste_0.png',0)
metodo = cv2.THRESH_OTSU + cv2.THRESH_BINARY_INV
ret,image_teste_0 = cv2.threshold(image_teste_0,127,255,metodo)

image_teste_0_r = cv2.resize(image_teste_0, (28,28))
image_teste_0_r = image_teste_0_r/255
plt.gray()
plt.imshow(image_teste_0_r)
plt.colorbar()

image_teste_0_f = image_teste_0_r.flatten()
knn_model.predict(image_teste_0_f.reshape(1,-1))

image_teste_2 = cv2.imread('teste_2.png',0)
metodo = cv2.THRESH_OTSU + cv2.THRESH_BINARY_INV
ret,image_teste_2 = cv2.threshold(image_teste_2,127,255,metodo)

image_teste_2_r = cv2.resize(image_teste_2, (28,28))
image_teste_2_r = image_teste_2_r/255
plt.gray()
plt.imshow(image_teste_2_r)
plt.colorbar()

image_teste_2_f = image_teste_2_r.flatten()
knn_model.predict(image_teste_2_f.reshape(1,-1))

image_teste_3 = cv2.imread('teste_3.png',0)
metodo = cv2.THRESH_OTSU + cv2.THRESH_BINARY_INV
ret,image_teste_3 = cv2.threshold(image_teste_3,127,255,metodo)

image_teste_3_r = cv2.resize(image_teste_3, (28,28))
image_teste_3_r = image_teste_3_r/255
plt.gray()
plt.imshow(image_teste_3_r)
plt.colorbar()

image_teste_3_f = image_teste_3_r.flatten()
knn_model.predict(image_teste_3_f.reshape(1,-1))

image_teste_4 = cv2.imread('teste_4.png',0)
metodo = cv2.THRESH_OTSU + cv2.THRESH_BINARY_INV
ret,image_teste_4 = cv2.threshold(image_teste_4,127,255,metodo)

image_teste_4_r = cv2.resize(image_teste_4, (28,28))
image_teste_4_r = image_teste_4_r/255
plt.gray()
plt.imshow(image_teste_4_r)
plt.colorbar()

image_teste_4_f = image_teste_4_r.flatten()
knn_model.predict(image_teste_4_f.reshape(1,-1))

image_teste_5 = cv2.imread('teste_5.png',0)
metodo = cv2.THRESH_OTSU + cv2.THRESH_BINARY_INV
ret,image_teste_5 = cv2.threshold(image_teste_5,127,255,metodo)

image_teste_5_r = cv2.resize(image_teste_5, (28,28))
image_teste_5_r = image_teste_5_r/255
plt.gray()
plt.imshow(image_teste_5_r)
plt.colorbar()

image_teste_5_f = image_teste_5_r.flatten()
knn_model.predict(image_teste_5_f.reshape(1,-1))